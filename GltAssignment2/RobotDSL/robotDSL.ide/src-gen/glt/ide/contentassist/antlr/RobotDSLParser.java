/*
 * generated by Xtext 2.11.0
 */
package glt.ide.contentassist.antlr;

import com.google.inject.Inject;
import glt.ide.contentassist.antlr.internal.InternalRobotDSLParser;
import glt.services.RobotDSLGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RobotDSLParser extends AbstractContentAssistParser {

	@Inject
	private RobotDSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRobotDSLParser createParser() {
		InternalRobotDSLParser result = new InternalRobotDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementsAccess().getAlternatives(), "rule__Statements__Alternatives");
					put(grammarAccess.getLogicalExpsAccess().getAlternatives(), "rule__LogicalExps__Alternatives");
					put(grammarAccess.getRunningStatementsAccess().getAlternatives(), "rule__RunningStatements__Alternatives");
					put(grammarAccess.getCommandStatementAccess().getAlternatives(), "rule__CommandStatement__Alternatives");
					put(grammarAccess.getBinariesAccess().getAlternatives(), "rule__Binaries__Alternatives");
					put(grammarAccess.getSingleLogalExpAccess().getAlternatives(), "rule__SingleLogalExp__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getDirectionsAccess().getAlternatives(), "rule__Directions__Alternatives");
					put(grammarAccess.getScriptAccess().getGroup(), "rule__Script__Group__0");
					put(grammarAccess.getScriptAccess().getGroup_5(), "rule__Script__Group_5__0");
					put(grammarAccess.getStatements_ImplAccess().getGroup(), "rule__Statements_Impl__Group__0");
					put(grammarAccess.getCommandStatement_ImplAccess().getGroup(), "rule__CommandStatement_Impl__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_4(), "rule__IfStatement__Group_4__0");
					put(grammarAccess.getWhileStatementAccess().getGroup(), "rule__WhileStatement__Group__0");
					put(grammarAccess.getWhileStatementAccess().getGroup_4(), "rule__WhileStatement__Group_4__0");
					put(grammarAccess.getRepeatStatementAccess().getGroup(), "rule__RepeatStatement__Group__0");
					put(grammarAccess.getRepeatStatementAccess().getGroup_4(), "rule__RepeatStatement__Group_4__0");
					put(grammarAccess.getStepAccess().getGroup(), "rule__Step__Group__0");
					put(grammarAccess.getTurnLeftAccess().getGroup(), "rule__TurnLeft__Group__0");
					put(grammarAccess.getDropAccess().getGroup(), "rule__Drop__Group__0");
					put(grammarAccess.getPickAccess().getGroup(), "rule__Pick__Group__0");
					put(grammarAccess.getTraceMessageAccess().getGroup(), "rule__TraceMessage__Group__0");
					put(grammarAccess.getCommentAccess().getGroup(), "rule__Comment__Group__0");
					put(grammarAccess.getBuildStatements_ImplAccess().getGroup(), "rule__BuildStatements_Impl__Group__0");
					put(grammarAccess.getDestroyWallAccess().getGroup(), "rule__DestroyWall__Group__0");
					put(grammarAccess.getPickMarkAccess().getGroup(), "rule__PickMark__Group__0");
					put(grammarAccess.getDropMarkAccess().getGroup(), "rule__DropMark__Group__0");
					put(grammarAccess.getBuildWallAccess().getGroup(), "rule__BuildWall__Group__0");
					put(grammarAccess.getRunningStatements_ImplAccess().getGroup(), "rule__RunningStatements_Impl__Group__0");
					put(grammarAccess.getLogicalExps_ImplAccess().getGroup(), "rule__LogicalExps_Impl__Group__0");
					put(grammarAccess.getElseAccess().getGroup(), "rule__Else__Group__0");
					put(grammarAccess.getElseAccess().getGroup_3(), "rule__Else__Group_3__0");
					put(grammarAccess.getFullAccess().getGroup(), "rule__Full__Group__0");
					put(grammarAccess.getMarkAccess().getGroup(), "rule__Mark__Group__0");
					put(grammarAccess.getWallAheadAccess().getGroup(), "rule__WallAhead__Group__0");
					put(grammarAccess.getHeadingAccess().getGroup(), "rule__Heading__Group__0");
					put(grammarAccess.getSingleLogalExp_ImplAccess().getGroup(), "rule__SingleLogalExp_Impl__Group__0");
					put(grammarAccess.getBinaryLogicalExpAccess().getGroup(), "rule__BinaryLogicalExp__Group__0");
					put(grammarAccess.getBinaryLogicalExpAccess().getGroup_1(), "rule__BinaryLogicalExp__Group_1__0");
					put(grammarAccess.getNotAccess().getGroup(), "rule__Not__Group__0");
					put(grammarAccess.getBinaries_ImplAccess().getGroup(), "rule__Binaries_Impl__Group__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getScriptAccess().getNameAssignment_2(), "rule__Script__NameAssignment_2");
					put(grammarAccess.getScriptAccess().getStatementsAssignment_5_0(), "rule__Script__StatementsAssignment_5_0");
					put(grammarAccess.getScriptAccess().getStatementsAssignment_5_1(), "rule__Script__StatementsAssignment_5_1");
					put(grammarAccess.getIfStatementAccess().getLogicalexpsAssignment_2(), "rule__IfStatement__LogicalexpsAssignment_2");
					put(grammarAccess.getIfStatementAccess().getRunningstatementsAssignment_4_0(), "rule__IfStatement__RunningstatementsAssignment_4_0");
					put(grammarAccess.getIfStatementAccess().getRunningstatementsAssignment_4_1(), "rule__IfStatement__RunningstatementsAssignment_4_1");
					put(grammarAccess.getIfStatementAccess().getElseAssignment_6(), "rule__IfStatement__ElseAssignment_6");
					put(grammarAccess.getWhileStatementAccess().getLogicalexpsAssignment_2(), "rule__WhileStatement__LogicalexpsAssignment_2");
					put(grammarAccess.getWhileStatementAccess().getRunningstatementsAssignment_4_0(), "rule__WhileStatement__RunningstatementsAssignment_4_0");
					put(grammarAccess.getWhileStatementAccess().getRunningstatementsAssignment_4_1(), "rule__WhileStatement__RunningstatementsAssignment_4_1");
					put(grammarAccess.getRepeatStatementAccess().getTimeAssignment_2(), "rule__RepeatStatement__TimeAssignment_2");
					put(grammarAccess.getRepeatStatementAccess().getCommandstatementAssignment_4_0(), "rule__RepeatStatement__CommandstatementAssignment_4_0");
					put(grammarAccess.getRepeatStatementAccess().getCommandstatementAssignment_4_1(), "rule__RepeatStatement__CommandstatementAssignment_4_1");
					put(grammarAccess.getTraceMessageAccess().getMessageAssignment_2(), "rule__TraceMessage__MessageAssignment_2");
					put(grammarAccess.getCommentAccess().getCommentAssignment_1(), "rule__Comment__CommentAssignment_1");
					put(grammarAccess.getDestroyWallAccess().getRowAssignment_4(), "rule__DestroyWall__RowAssignment_4");
					put(grammarAccess.getDestroyWallAccess().getColumnAssignment_6(), "rule__DestroyWall__ColumnAssignment_6");
					put(grammarAccess.getPickMarkAccess().getRowAssignment_4(), "rule__PickMark__RowAssignment_4");
					put(grammarAccess.getPickMarkAccess().getColumnAssignment_6(), "rule__PickMark__ColumnAssignment_6");
					put(grammarAccess.getDropMarkAccess().getRowAssignment_4(), "rule__DropMark__RowAssignment_4");
					put(grammarAccess.getDropMarkAccess().getColumnAssignment_6(), "rule__DropMark__ColumnAssignment_6");
					put(grammarAccess.getBuildWallAccess().getRowAssignment_4(), "rule__BuildWall__RowAssignment_4");
					put(grammarAccess.getBuildWallAccess().getColumnAssignment_6(), "rule__BuildWall__ColumnAssignment_6");
					put(grammarAccess.getElseAccess().getRunningstatementsAssignment_3_0(), "rule__Else__RunningstatementsAssignment_3_0");
					put(grammarAccess.getElseAccess().getRunningstatementsAssignment_3_1(), "rule__Else__RunningstatementsAssignment_3_1");
					put(grammarAccess.getFullAccess().getNotAssignment_1(), "rule__Full__NotAssignment_1");
					put(grammarAccess.getMarkAccess().getNotAssignment_1(), "rule__Mark__NotAssignment_1");
					put(grammarAccess.getWallAheadAccess().getNotAssignment_1(), "rule__WallAhead__NotAssignment_1");
					put(grammarAccess.getHeadingAccess().getNotAssignment_1(), "rule__Heading__NotAssignment_1");
					put(grammarAccess.getHeadingAccess().getDirectionAssignment_3(), "rule__Heading__DirectionAssignment_3");
					put(grammarAccess.getBinaryLogicalExpAccess().getSinglelogalexpAssignment_0(), "rule__BinaryLogicalExp__SinglelogalexpAssignment_0");
					put(grammarAccess.getBinaryLogicalExpAccess().getBinariesAssignment_1_0(), "rule__BinaryLogicalExp__BinariesAssignment_1_0");
					put(grammarAccess.getBinaryLogicalExpAccess().getSinglelogalexpAssignment_1_1(), "rule__BinaryLogicalExp__SinglelogalexpAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RobotDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RobotDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
