/*
 * generated by Xtext 2.11.0
 */
grammar InternalRobotDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package glt.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package glt.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import glt.services.RobotDSLGrammarAccess;

}
@parser::members {
	private RobotDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(RobotDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleScript
entryRuleScript
:
{ before(grammarAccess.getScriptRule()); }
	 ruleScript
{ after(grammarAccess.getScriptRule()); } 
	 EOF 
;

// Rule Script
ruleScript 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScriptAccess().getGroup()); }
		(rule__Script__Group__0)
		{ after(grammarAccess.getScriptAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatements
entryRuleStatements
:
{ before(grammarAccess.getStatementsRule()); }
	 ruleStatements
{ after(grammarAccess.getStatementsRule()); } 
	 EOF 
;

// Rule Statements
ruleStatements 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementsAccess().getAlternatives()); }
		(rule__Statements__Alternatives)
		{ after(grammarAccess.getStatementsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalExps
entryRuleLogicalExps
:
{ before(grammarAccess.getLogicalExpsRule()); }
	 ruleLogicalExps
{ after(grammarAccess.getLogicalExpsRule()); } 
	 EOF 
;

// Rule LogicalExps
ruleLogicalExps 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalExpsAccess().getAlternatives()); }
		(rule__LogicalExps__Alternatives)
		{ after(grammarAccess.getLogicalExpsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRunningStatements
entryRuleRunningStatements
:
{ before(grammarAccess.getRunningStatementsRule()); }
	 ruleRunningStatements
{ after(grammarAccess.getRunningStatementsRule()); } 
	 EOF 
;

// Rule RunningStatements
ruleRunningStatements 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRunningStatementsAccess().getAlternatives()); }
		(rule__RunningStatements__Alternatives)
		{ after(grammarAccess.getRunningStatementsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommandStatement
entryRuleCommandStatement
:
{ before(grammarAccess.getCommandStatementRule()); }
	 ruleCommandStatement
{ after(grammarAccess.getCommandStatementRule()); } 
	 EOF 
;

// Rule CommandStatement
ruleCommandStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandStatementAccess().getAlternatives()); }
		(rule__CommandStatement__Alternatives)
		{ after(grammarAccess.getCommandStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaries
entryRuleBinaries
:
{ before(grammarAccess.getBinariesRule()); }
	 ruleBinaries
{ after(grammarAccess.getBinariesRule()); } 
	 EOF 
;

// Rule Binaries
ruleBinaries 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinariesAccess().getAlternatives()); }
		(rule__Binaries__Alternatives)
		{ after(grammarAccess.getBinariesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleLogalExp
entryRuleSingleLogalExp
:
{ before(grammarAccess.getSingleLogalExpRule()); }
	 ruleSingleLogalExp
{ after(grammarAccess.getSingleLogalExpRule()); } 
	 EOF 
;

// Rule SingleLogalExp
ruleSingleLogalExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingleLogalExpAccess().getAlternatives()); }
		(rule__SingleLogalExp__Alternatives)
		{ after(grammarAccess.getSingleLogalExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfStatement
entryRuleIfStatement
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfStatementAccess().getGroup()); }
		(rule__IfStatement__Group__0)
		{ after(grammarAccess.getIfStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement
:
{ before(grammarAccess.getWhileStatementRule()); }
	 ruleWhileStatement
{ after(grammarAccess.getWhileStatementRule()); } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileStatementAccess().getGroup()); }
		(rule__WhileStatement__Group__0)
		{ after(grammarAccess.getWhileStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRepeatStatement
entryRuleRepeatStatement
:
{ before(grammarAccess.getRepeatStatementRule()); }
	 ruleRepeatStatement
{ after(grammarAccess.getRepeatStatementRule()); } 
	 EOF 
;

// Rule RepeatStatement
ruleRepeatStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRepeatStatementAccess().getGroup()); }
		(rule__RepeatStatement__Group__0)
		{ after(grammarAccess.getRepeatStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStep
entryRuleStep
:
{ before(grammarAccess.getStepRule()); }
	 ruleStep
{ after(grammarAccess.getStepRule()); } 
	 EOF 
;

// Rule Step
ruleStep 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStepAccess().getGroup()); }
		(rule__Step__Group__0)
		{ after(grammarAccess.getStepAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurnLeft
entryRuleTurnLeft
:
{ before(grammarAccess.getTurnLeftRule()); }
	 ruleTurnLeft
{ after(grammarAccess.getTurnLeftRule()); } 
	 EOF 
;

// Rule TurnLeft
ruleTurnLeft 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnLeftAccess().getGroup()); }
		(rule__TurnLeft__Group__0)
		{ after(grammarAccess.getTurnLeftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDrop
entryRuleDrop
:
{ before(grammarAccess.getDropRule()); }
	 ruleDrop
{ after(grammarAccess.getDropRule()); } 
	 EOF 
;

// Rule Drop
ruleDrop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDropAccess().getGroup()); }
		(rule__Drop__Group__0)
		{ after(grammarAccess.getDropAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePick
entryRulePick
:
{ before(grammarAccess.getPickRule()); }
	 rulePick
{ after(grammarAccess.getPickRule()); } 
	 EOF 
;

// Rule Pick
rulePick 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPickAccess().getGroup()); }
		(rule__Pick__Group__0)
		{ after(grammarAccess.getPickAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTraceMessage
entryRuleTraceMessage
:
{ before(grammarAccess.getTraceMessageRule()); }
	 ruleTraceMessage
{ after(grammarAccess.getTraceMessageRule()); } 
	 EOF 
;

// Rule TraceMessage
ruleTraceMessage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTraceMessageAccess().getGroup()); }
		(rule__TraceMessage__Group__0)
		{ after(grammarAccess.getTraceMessageAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComment
entryRuleComment
:
{ before(grammarAccess.getCommentRule()); }
	 ruleComment
{ after(grammarAccess.getCommentRule()); } 
	 EOF 
;

// Rule Comment
ruleComment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommentAccess().getGroup()); }
		(rule__Comment__Group__0)
		{ after(grammarAccess.getCommentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDestroyWall
entryRuleDestroyWall
:
{ before(grammarAccess.getDestroyWallRule()); }
	 ruleDestroyWall
{ after(grammarAccess.getDestroyWallRule()); } 
	 EOF 
;

// Rule DestroyWall
ruleDestroyWall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDestroyWallAccess().getGroup()); }
		(rule__DestroyWall__Group__0)
		{ after(grammarAccess.getDestroyWallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePickMark
entryRulePickMark
:
{ before(grammarAccess.getPickMarkRule()); }
	 rulePickMark
{ after(grammarAccess.getPickMarkRule()); } 
	 EOF 
;

// Rule PickMark
rulePickMark 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPickMarkAccess().getGroup()); }
		(rule__PickMark__Group__0)
		{ after(grammarAccess.getPickMarkAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDropMark
entryRuleDropMark
:
{ before(grammarAccess.getDropMarkRule()); }
	 ruleDropMark
{ after(grammarAccess.getDropMarkRule()); } 
	 EOF 
;

// Rule DropMark
ruleDropMark 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDropMarkAccess().getGroup()); }
		(rule__DropMark__Group__0)
		{ after(grammarAccess.getDropMarkAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBuildWall
entryRuleBuildWall
:
{ before(grammarAccess.getBuildWallRule()); }
	 ruleBuildWall
{ after(grammarAccess.getBuildWallRule()); } 
	 EOF 
;

// Rule BuildWall
ruleBuildWall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBuildWallAccess().getGroup()); }
		(rule__BuildWall__Group__0)
		{ after(grammarAccess.getBuildWallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElse
entryRuleElse
:
{ before(grammarAccess.getElseRule()); }
	 ruleElse
{ after(grammarAccess.getElseRule()); } 
	 EOF 
;

// Rule Else
ruleElse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElseAccess().getGroup()); }
		(rule__Else__Group__0)
		{ after(grammarAccess.getElseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFull
entryRuleFull
:
{ before(grammarAccess.getFullRule()); }
	 ruleFull
{ after(grammarAccess.getFullRule()); } 
	 EOF 
;

// Rule Full
ruleFull 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFullAccess().getGroup()); }
		(rule__Full__Group__0)
		{ after(grammarAccess.getFullAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMark
entryRuleMark
:
{ before(grammarAccess.getMarkRule()); }
	 ruleMark
{ after(grammarAccess.getMarkRule()); } 
	 EOF 
;

// Rule Mark
ruleMark 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMarkAccess().getGroup()); }
		(rule__Mark__Group__0)
		{ after(grammarAccess.getMarkAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWallAhead
entryRuleWallAhead
:
{ before(grammarAccess.getWallAheadRule()); }
	 ruleWallAhead
{ after(grammarAccess.getWallAheadRule()); } 
	 EOF 
;

// Rule WallAhead
ruleWallAhead 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWallAheadAccess().getGroup()); }
		(rule__WallAhead__Group__0)
		{ after(grammarAccess.getWallAheadAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeading
entryRuleHeading
:
{ before(grammarAccess.getHeadingRule()); }
	 ruleHeading
{ after(grammarAccess.getHeadingRule()); } 
	 EOF 
;

// Rule Heading
ruleHeading 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeadingAccess().getGroup()); }
		(rule__Heading__Group__0)
		{ after(grammarAccess.getHeadingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaryLogicalExp
entryRuleBinaryLogicalExp
:
{ before(grammarAccess.getBinaryLogicalExpRule()); }
	 ruleBinaryLogicalExp
{ after(grammarAccess.getBinaryLogicalExpRule()); } 
	 EOF 
;

// Rule BinaryLogicalExp
ruleBinaryLogicalExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryLogicalExpAccess().getGroup()); }
		(rule__BinaryLogicalExp__Group__0)
		{ after(grammarAccess.getBinaryLogicalExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getGroup()); }
		(rule__Not__Group__0)
		{ after(grammarAccess.getNotAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMessages
entryRuleMessages
:
{ before(grammarAccess.getMessagesRule()); }
	 ruleMessages
{ after(grammarAccess.getMessagesRule()); } 
	 EOF 
;

// Rule Messages
ruleMessages 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMessagesAccess().getSTRINGTerminalRuleCall()); }
		RULE_STRING
		{ after(grammarAccess.getMessagesAccess().getSTRINGTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Directions
ruleDirections
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectionsAccess().getAlternatives()); }
		(rule__Directions__Alternatives)
		{ after(grammarAccess.getDirectionsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementsAccess().getIfStatementParserRuleCall_0()); }
		ruleIfStatement
		{ after(grammarAccess.getStatementsAccess().getIfStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getWhileStatementParserRuleCall_1()); }
		ruleWhileStatement
		{ after(grammarAccess.getStatementsAccess().getWhileStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getRepeatStatementParserRuleCall_2()); }
		ruleRepeatStatement
		{ after(grammarAccess.getStatementsAccess().getRepeatStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getStepParserRuleCall_3()); }
		ruleStep
		{ after(grammarAccess.getStatementsAccess().getStepParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getTurnLeftParserRuleCall_4()); }
		ruleTurnLeft
		{ after(grammarAccess.getStatementsAccess().getTurnLeftParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getDropParserRuleCall_5()); }
		ruleDrop
		{ after(grammarAccess.getStatementsAccess().getDropParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getPickParserRuleCall_6()); }
		rulePick
		{ after(grammarAccess.getStatementsAccess().getPickParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getTraceMessageParserRuleCall_7()); }
		ruleTraceMessage
		{ after(grammarAccess.getStatementsAccess().getTraceMessageParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getCommentParserRuleCall_8()); }
		ruleComment
		{ after(grammarAccess.getStatementsAccess().getCommentParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getDestroyWallParserRuleCall_9()); }
		ruleDestroyWall
		{ after(grammarAccess.getStatementsAccess().getDestroyWallParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getPickMarkParserRuleCall_10()); }
		rulePickMark
		{ after(grammarAccess.getStatementsAccess().getPickMarkParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getDropMarkParserRuleCall_11()); }
		ruleDropMark
		{ after(grammarAccess.getStatementsAccess().getDropMarkParserRuleCall_11()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getBuildWallParserRuleCall_12()); }
		ruleBuildWall
		{ after(grammarAccess.getStatementsAccess().getBuildWallParserRuleCall_12()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExps__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalExpsAccess().getFullParserRuleCall_0()); }
		ruleFull
		{ after(grammarAccess.getLogicalExpsAccess().getFullParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalExpsAccess().getMarkParserRuleCall_1()); }
		ruleMark
		{ after(grammarAccess.getLogicalExpsAccess().getMarkParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalExpsAccess().getWallAheadParserRuleCall_2()); }
		ruleWallAhead
		{ after(grammarAccess.getLogicalExpsAccess().getWallAheadParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalExpsAccess().getHeadingParserRuleCall_3()); }
		ruleHeading
		{ after(grammarAccess.getLogicalExpsAccess().getHeadingParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalExpsAccess().getBinaryLogicalExpParserRuleCall_4()); }
		ruleBinaryLogicalExp
		{ after(grammarAccess.getLogicalExpsAccess().getBinaryLogicalExpParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RunningStatements__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRunningStatementsAccess().getIfStatementParserRuleCall_0()); }
		ruleIfStatement
		{ after(grammarAccess.getRunningStatementsAccess().getIfStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRunningStatementsAccess().getWhileStatementParserRuleCall_1()); }
		ruleWhileStatement
		{ after(grammarAccess.getRunningStatementsAccess().getWhileStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getRunningStatementsAccess().getRepeatStatementParserRuleCall_2()); }
		ruleRepeatStatement
		{ after(grammarAccess.getRunningStatementsAccess().getRepeatStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getRunningStatementsAccess().getStepParserRuleCall_3()); }
		ruleStep
		{ after(grammarAccess.getRunningStatementsAccess().getStepParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getRunningStatementsAccess().getTurnLeftParserRuleCall_4()); }
		ruleTurnLeft
		{ after(grammarAccess.getRunningStatementsAccess().getTurnLeftParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getRunningStatementsAccess().getDropParserRuleCall_5()); }
		ruleDrop
		{ after(grammarAccess.getRunningStatementsAccess().getDropParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getRunningStatementsAccess().getPickParserRuleCall_6()); }
		rulePick
		{ after(grammarAccess.getRunningStatementsAccess().getPickParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getRunningStatementsAccess().getTraceMessageParserRuleCall_7()); }
		ruleTraceMessage
		{ after(grammarAccess.getRunningStatementsAccess().getTraceMessageParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getRunningStatementsAccess().getCommentParserRuleCall_8()); }
		ruleComment
		{ after(grammarAccess.getRunningStatementsAccess().getCommentParserRuleCall_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandStatementAccess().getStepParserRuleCall_0()); }
		ruleStep
		{ after(grammarAccess.getCommandStatementAccess().getStepParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandStatementAccess().getTurnLeftParserRuleCall_1()); }
		ruleTurnLeft
		{ after(grammarAccess.getCommandStatementAccess().getTurnLeftParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandStatementAccess().getDropParserRuleCall_2()); }
		ruleDrop
		{ after(grammarAccess.getCommandStatementAccess().getDropParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandStatementAccess().getPickParserRuleCall_3()); }
		rulePick
		{ after(grammarAccess.getCommandStatementAccess().getPickParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getCommandStatementAccess().getTraceMessageParserRuleCall_4()); }
		ruleTraceMessage
		{ after(grammarAccess.getCommandStatementAccess().getTraceMessageParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getCommandStatementAccess().getCommentParserRuleCall_5()); }
		ruleComment
		{ after(grammarAccess.getCommandStatementAccess().getCommentParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binaries__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinariesAccess().getAndParserRuleCall_0()); }
		ruleAnd
		{ after(grammarAccess.getBinariesAccess().getAndParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinariesAccess().getOrParserRuleCall_1()); }
		ruleOr
		{ after(grammarAccess.getBinariesAccess().getOrParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleLogalExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleLogalExpAccess().getFullParserRuleCall_0()); }
		ruleFull
		{ after(grammarAccess.getSingleLogalExpAccess().getFullParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSingleLogalExpAccess().getMarkParserRuleCall_1()); }
		ruleMark
		{ after(grammarAccess.getSingleLogalExpAccess().getMarkParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSingleLogalExpAccess().getWallAheadParserRuleCall_2()); }
		ruleWallAhead
		{ after(grammarAccess.getSingleLogalExpAccess().getWallAheadParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getSingleLogalExpAccess().getHeadingParserRuleCall_3()); }
		ruleHeading
		{ after(grammarAccess.getSingleLogalExpAccess().getHeadingParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directions__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectionsAccess().getSouthEnumLiteralDeclaration_0()); }
		('south')
		{ after(grammarAccess.getDirectionsAccess().getSouthEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionsAccess().getNorthEnumLiteralDeclaration_1()); }
		('north')
		{ after(grammarAccess.getDirectionsAccess().getNorthEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionsAccess().getWestEnumLiteralDeclaration_2()); }
		('west')
		{ after(grammarAccess.getDirectionsAccess().getWestEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionsAccess().getEastEnumLiteralDeclaration_3()); }
		('east')
		{ after(grammarAccess.getDirectionsAccess().getEastEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__0__Impl
	rule__Script__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getScriptAction_0()); }
	()
	{ after(grammarAccess.getScriptAccess().getScriptAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__1__Impl
	rule__Script__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getScriptKeyword_1()); }
	'Script'
	{ after(grammarAccess.getScriptAccess().getScriptKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__2__Impl
	rule__Script__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getNameAssignment_2()); }
	(rule__Script__NameAssignment_2)
	{ after(grammarAccess.getScriptAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__3__Impl
	rule__Script__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getRunsKeyword_3()); }
	'runs'
	{ after(grammarAccess.getScriptAccess().getRunsKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__4__Impl
	rule__Script__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getAsKeyword_4()); }
	'as'
	{ after(grammarAccess.getScriptAccess().getAsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__5__Impl
	rule__Script__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getGroup_5()); }
	(rule__Script__Group_5__0)?
	{ after(grammarAccess.getScriptAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getEndKeyword_6()); }
	'end'
	{ after(grammarAccess.getScriptAccess().getEndKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group_5__0__Impl
	rule__Script__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getStatementsAssignment_5_0()); }
	(rule__Script__StatementsAssignment_5_0)
	{ after(grammarAccess.getScriptAccess().getStatementsAssignment_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getStatementsAssignment_5_1()); }
	(rule__Script__StatementsAssignment_5_1)*
	{ after(grammarAccess.getScriptAccess().getStatementsAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getIfStatementAction_0()); }
	()
	{ after(grammarAccess.getIfStatementAccess().getIfStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getIfKeyword_1()); }
	'if'
	{ after(grammarAccess.getIfStatementAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getLogicalexpsAssignment_2()); }
	(rule__IfStatement__LogicalexpsAssignment_2)
	{ after(grammarAccess.getIfStatementAccess().getLogicalexpsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getDoKeyword_3()); }
	'do'
	{ after(grammarAccess.getIfStatementAccess().getDoKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getGroup_4()); }
	(rule__IfStatement__Group_4__0)?
	{ after(grammarAccess.getIfStatementAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__5__Impl
	rule__IfStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getEndKeyword_5()); }
	'end'
	{ after(grammarAccess.getIfStatementAccess().getEndKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseAssignment_6()); }
	(rule__IfStatement__ElseAssignment_6)?
	{ after(grammarAccess.getIfStatementAccess().getElseAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_4__0__Impl
	rule__IfStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getRunningstatementsAssignment_4_0()); }
	(rule__IfStatement__RunningstatementsAssignment_4_0)
	{ after(grammarAccess.getIfStatementAccess().getRunningstatementsAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getRunningstatementsAssignment_4_1()); }
	(rule__IfStatement__RunningstatementsAssignment_4_1)*
	{ after(grammarAccess.getIfStatementAccess().getRunningstatementsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__0__Impl
	rule__WhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getWhileStatementAction_0()); }
	()
	{ after(grammarAccess.getWhileStatementAccess().getWhileStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__1__Impl
	rule__WhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getWhileKeyword_1()); }
	'while'
	{ after(grammarAccess.getWhileStatementAccess().getWhileKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__2__Impl
	rule__WhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getLogicalexpsAssignment_2()); }
	(rule__WhileStatement__LogicalexpsAssignment_2)
	{ after(grammarAccess.getWhileStatementAccess().getLogicalexpsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__3__Impl
	rule__WhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getDoKeyword_3()); }
	'do'
	{ after(grammarAccess.getWhileStatementAccess().getDoKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__4__Impl
	rule__WhileStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getGroup_4()); }
	(rule__WhileStatement__Group_4__0)?
	{ after(grammarAccess.getWhileStatementAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getEndKeyword_5()); }
	'end'
	{ after(grammarAccess.getWhileStatementAccess().getEndKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group_4__0__Impl
	rule__WhileStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getRunningstatementsAssignment_4_0()); }
	(rule__WhileStatement__RunningstatementsAssignment_4_0)
	{ after(grammarAccess.getWhileStatementAccess().getRunningstatementsAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getRunningstatementsAssignment_4_1()); }
	(rule__WhileStatement__RunningstatementsAssignment_4_1)*
	{ after(grammarAccess.getWhileStatementAccess().getRunningstatementsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RepeatStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__0__Impl
	rule__RepeatStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getRepeatStatementAction_0()); }
	()
	{ after(grammarAccess.getRepeatStatementAccess().getRepeatStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__1__Impl
	rule__RepeatStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getRepeatKeyword_1()); }
	'repeat'
	{ after(grammarAccess.getRepeatStatementAccess().getRepeatKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__2__Impl
	rule__RepeatStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getTimeAssignment_2()); }
	(rule__RepeatStatement__TimeAssignment_2)
	{ after(grammarAccess.getRepeatStatementAccess().getTimeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__3__Impl
	rule__RepeatStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getTimesKeyword_3()); }
	'times'
	{ after(grammarAccess.getRepeatStatementAccess().getTimesKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__4__Impl
	rule__RepeatStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getGroup_4()); }
	(rule__RepeatStatement__Group_4__0)?
	{ after(grammarAccess.getRepeatStatementAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getEndKeyword_5()); }
	'end'
	{ after(grammarAccess.getRepeatStatementAccess().getEndKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RepeatStatement__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group_4__0__Impl
	rule__RepeatStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getCommandstatementAssignment_4_0()); }
	(rule__RepeatStatement__CommandstatementAssignment_4_0)
	{ after(grammarAccess.getRepeatStatementAccess().getCommandstatementAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getCommandstatementAssignment_4_1()); }
	(rule__RepeatStatement__CommandstatementAssignment_4_1)*
	{ after(grammarAccess.getRepeatStatementAccess().getCommandstatementAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__0__Impl
	rule__Step__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getStepAction_0()); }
	()
	{ after(grammarAccess.getStepAccess().getStepAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getStepKeyword_1()); }
	'step'
	{ after(grammarAccess.getStepAccess().getStepKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TurnLeft__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnLeft__Group__0__Impl
	rule__TurnLeft__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnLeft__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnLeftAccess().getTurnLeftAction_0()); }
	()
	{ after(grammarAccess.getTurnLeftAccess().getTurnLeftAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnLeft__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnLeft__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnLeft__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnLeftAccess().getTurnLeftKeyword_1()); }
	'turnLeft'
	{ after(grammarAccess.getTurnLeftAccess().getTurnLeftKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Drop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drop__Group__0__Impl
	rule__Drop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Drop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropAccess().getDropAction_0()); }
	()
	{ after(grammarAccess.getDropAccess().getDropAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drop__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Drop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropAccess().getDropKeyword_1()); }
	'drop'
	{ after(grammarAccess.getDropAccess().getDropKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pick__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pick__Group__0__Impl
	rule__Pick__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pick__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickAccess().getPickAction_0()); }
	()
	{ after(grammarAccess.getPickAccess().getPickAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pick__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pick__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pick__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickAccess().getPickKeyword_1()); }
	'pick'
	{ after(grammarAccess.getPickAccess().getPickKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TraceMessage__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TraceMessage__Group__0__Impl
	rule__TraceMessage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceMessage__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceMessageAccess().getTraceMessageAction_0()); }
	()
	{ after(grammarAccess.getTraceMessageAccess().getTraceMessageAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceMessage__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TraceMessage__Group__1__Impl
	rule__TraceMessage__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceMessage__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceMessageAccess().getTraceKeyword_1()); }
	'trace'
	{ after(grammarAccess.getTraceMessageAccess().getTraceKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceMessage__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TraceMessage__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceMessage__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceMessageAccess().getMessageAssignment_2()); }
	(rule__TraceMessage__MessageAssignment_2)
	{ after(grammarAccess.getTraceMessageAccess().getMessageAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comment__Group__0__Impl
	rule__Comment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommentAccess().getCommentAction_0()); }
	()
	{ after(grammarAccess.getCommentAccess().getCommentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommentAccess().getCommentAssignment_1()); }
	(rule__Comment__CommentAssignment_1)
	{ after(grammarAccess.getCommentAccess().getCommentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DestroyWall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DestroyWall__Group__0__Impl
	rule__DestroyWall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDestroyWallAccess().getDestroyWallAction_0()); }
	()
	{ after(grammarAccess.getDestroyWallAccess().getDestroyWallAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DestroyWall__Group__1__Impl
	rule__DestroyWall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDestroyWallAccess().getDestroyWallKeyword_1()); }
	'destroyWall'
	{ after(grammarAccess.getDestroyWallAccess().getDestroyWallKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DestroyWall__Group__2__Impl
	rule__DestroyWall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDestroyWallAccess().getAtKeyword_2()); }
	'at'
	{ after(grammarAccess.getDestroyWallAccess().getAtKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DestroyWall__Group__3__Impl
	rule__DestroyWall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDestroyWallAccess().getRowKeyword_3()); }
	'row:'
	{ after(grammarAccess.getDestroyWallAccess().getRowKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DestroyWall__Group__4__Impl
	rule__DestroyWall__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDestroyWallAccess().getRowAssignment_4()); }
	(rule__DestroyWall__RowAssignment_4)
	{ after(grammarAccess.getDestroyWallAccess().getRowAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWall__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DestroyWall__Group__5__Impl
	rule__DestroyWall__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWall__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDestroyWallAccess().getColKeyword_5()); }
	'col:'
	{ after(grammarAccess.getDestroyWallAccess().getColKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWall__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DestroyWall__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWall__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDestroyWallAccess().getColumnAssignment_6()); }
	(rule__DestroyWall__ColumnAssignment_6)
	{ after(grammarAccess.getDestroyWallAccess().getColumnAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PickMark__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickMark__Group__0__Impl
	rule__PickMark__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMark__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickMarkAccess().getPickMarkAction_0()); }
	()
	{ after(grammarAccess.getPickMarkAccess().getPickMarkAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMark__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickMark__Group__1__Impl
	rule__PickMark__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMark__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickMarkAccess().getPickMarkKeyword_1()); }
	'pickMark'
	{ after(grammarAccess.getPickMarkAccess().getPickMarkKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMark__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickMark__Group__2__Impl
	rule__PickMark__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMark__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickMarkAccess().getAtKeyword_2()); }
	'at'
	{ after(grammarAccess.getPickMarkAccess().getAtKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMark__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickMark__Group__3__Impl
	rule__PickMark__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMark__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickMarkAccess().getRowKeyword_3()); }
	'row:'
	{ after(grammarAccess.getPickMarkAccess().getRowKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMark__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickMark__Group__4__Impl
	rule__PickMark__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMark__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickMarkAccess().getRowAssignment_4()); }
	(rule__PickMark__RowAssignment_4)
	{ after(grammarAccess.getPickMarkAccess().getRowAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMark__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickMark__Group__5__Impl
	rule__PickMark__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMark__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickMarkAccess().getColKeyword_5()); }
	'col:'
	{ after(grammarAccess.getPickMarkAccess().getColKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMark__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickMark__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMark__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickMarkAccess().getColumnAssignment_6()); }
	(rule__PickMark__ColumnAssignment_6)
	{ after(grammarAccess.getPickMarkAccess().getColumnAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DropMark__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropMark__Group__0__Impl
	rule__DropMark__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMark__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropMarkAccess().getDropMarkAction_0()); }
	()
	{ after(grammarAccess.getDropMarkAccess().getDropMarkAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMark__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropMark__Group__1__Impl
	rule__DropMark__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMark__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropMarkAccess().getDropMarkKeyword_1()); }
	'dropMark'
	{ after(grammarAccess.getDropMarkAccess().getDropMarkKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMark__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropMark__Group__2__Impl
	rule__DropMark__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMark__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropMarkAccess().getAtKeyword_2()); }
	'at'
	{ after(grammarAccess.getDropMarkAccess().getAtKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMark__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropMark__Group__3__Impl
	rule__DropMark__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMark__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropMarkAccess().getRowKeyword_3()); }
	'row:'
	{ after(grammarAccess.getDropMarkAccess().getRowKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMark__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropMark__Group__4__Impl
	rule__DropMark__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMark__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropMarkAccess().getRowAssignment_4()); }
	(rule__DropMark__RowAssignment_4)
	{ after(grammarAccess.getDropMarkAccess().getRowAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMark__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropMark__Group__5__Impl
	rule__DropMark__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMark__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropMarkAccess().getColKeyword_5()); }
	'col:'
	{ after(grammarAccess.getDropMarkAccess().getColKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMark__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropMark__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMark__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropMarkAccess().getColumnAssignment_6()); }
	(rule__DropMark__ColumnAssignment_6)
	{ after(grammarAccess.getDropMarkAccess().getColumnAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BuildWall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BuildWall__Group__0__Impl
	rule__BuildWall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuildWallAccess().getBuildWallAction_0()); }
	()
	{ after(grammarAccess.getBuildWallAccess().getBuildWallAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BuildWall__Group__1__Impl
	rule__BuildWall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuildWallAccess().getBuildWallKeyword_1()); }
	'buildWall'
	{ after(grammarAccess.getBuildWallAccess().getBuildWallKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BuildWall__Group__2__Impl
	rule__BuildWall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuildWallAccess().getAtKeyword_2()); }
	'at'
	{ after(grammarAccess.getBuildWallAccess().getAtKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BuildWall__Group__3__Impl
	rule__BuildWall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuildWallAccess().getRowKeyword_3()); }
	'row:'
	{ after(grammarAccess.getBuildWallAccess().getRowKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BuildWall__Group__4__Impl
	rule__BuildWall__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuildWallAccess().getRowAssignment_4()); }
	(rule__BuildWall__RowAssignment_4)
	{ after(grammarAccess.getBuildWallAccess().getRowAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWall__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BuildWall__Group__5__Impl
	rule__BuildWall__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWall__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuildWallAccess().getColKeyword_5()); }
	'col:'
	{ after(grammarAccess.getBuildWallAccess().getColKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWall__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BuildWall__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWall__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuildWallAccess().getColumnAssignment_6()); }
	(rule__BuildWall__ColumnAssignment_6)
	{ after(grammarAccess.getBuildWallAccess().getColumnAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Else__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Else__Group__0__Impl
	rule__Else__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseAccess().getElseAction_0()); }
	()
	{ after(grammarAccess.getElseAccess().getElseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Else__Group__1__Impl
	rule__Else__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseAccess().getElseKeyword_1()); }
	'else'
	{ after(grammarAccess.getElseAccess().getElseKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Else__Group__2__Impl
	rule__Else__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseAccess().getDoKeyword_2()); }
	'do'
	{ after(grammarAccess.getElseAccess().getDoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Else__Group__3__Impl
	rule__Else__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseAccess().getGroup_3()); }
	(rule__Else__Group_3__0)?
	{ after(grammarAccess.getElseAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Else__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getElseAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Else__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Else__Group_3__0__Impl
	rule__Else__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseAccess().getRunningstatementsAssignment_3_0()); }
	(rule__Else__RunningstatementsAssignment_3_0)
	{ after(grammarAccess.getElseAccess().getRunningstatementsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Else__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseAccess().getRunningstatementsAssignment_3_1()); }
	(rule__Else__RunningstatementsAssignment_3_1)*
	{ after(grammarAccess.getElseAccess().getRunningstatementsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Full__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Full__Group__0__Impl
	rule__Full__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Full__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullAccess().getFullAction_0()); }
	()
	{ after(grammarAccess.getFullAccess().getFullAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Full__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Full__Group__1__Impl
	rule__Full__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Full__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullAccess().getNotAssignment_1()); }
	(rule__Full__NotAssignment_1)?
	{ after(grammarAccess.getFullAccess().getNotAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Full__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Full__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Full__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullAccess().getFullKeyword_2()); }
	'full'
	{ after(grammarAccess.getFullAccess().getFullKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mark__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mark__Group__0__Impl
	rule__Mark__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkAccess().getMarkAction_0()); }
	()
	{ after(grammarAccess.getMarkAccess().getMarkAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mark__Group__1__Impl
	rule__Mark__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkAccess().getNotAssignment_1()); }
	(rule__Mark__NotAssignment_1)?
	{ after(grammarAccess.getMarkAccess().getNotAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mark__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkAccess().getMarkKeyword_2()); }
	'mark'
	{ after(grammarAccess.getMarkAccess().getMarkKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WallAhead__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WallAhead__Group__0__Impl
	rule__WallAhead__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAhead__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallAheadAccess().getWallAheadAction_0()); }
	()
	{ after(grammarAccess.getWallAheadAccess().getWallAheadAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAhead__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WallAhead__Group__1__Impl
	rule__WallAhead__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAhead__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallAheadAccess().getNotAssignment_1()); }
	(rule__WallAhead__NotAssignment_1)?
	{ after(grammarAccess.getWallAheadAccess().getNotAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAhead__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WallAhead__Group__2__Impl
	rule__WallAhead__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAhead__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallAheadAccess().getWallKeyword_2()); }
	'wall'
	{ after(grammarAccess.getWallAheadAccess().getWallKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAhead__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WallAhead__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAhead__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallAheadAccess().getAheadKeyword_3()); }
	'ahead'
	{ after(grammarAccess.getWallAheadAccess().getAheadKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Heading__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Heading__Group__0__Impl
	rule__Heading__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Heading__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadingAccess().getHeadingAction_0()); }
	()
	{ after(grammarAccess.getHeadingAccess().getHeadingAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Heading__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Heading__Group__1__Impl
	rule__Heading__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Heading__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadingAccess().getNotAssignment_1()); }
	(rule__Heading__NotAssignment_1)?
	{ after(grammarAccess.getHeadingAccess().getNotAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Heading__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Heading__Group__2__Impl
	rule__Heading__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Heading__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadingAccess().getHeadingKeyword_2()); }
	'heading'
	{ after(grammarAccess.getHeadingAccess().getHeadingKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Heading__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Heading__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Heading__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadingAccess().getDirectionAssignment_3()); }
	(rule__Heading__DirectionAssignment_3)
	{ after(grammarAccess.getHeadingAccess().getDirectionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryLogicalExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryLogicalExp__Group__0__Impl
	rule__BinaryLogicalExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicalExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryLogicalExpAccess().getSinglelogalexpAssignment_0()); }
	(rule__BinaryLogicalExp__SinglelogalexpAssignment_0)
	{ after(grammarAccess.getBinaryLogicalExpAccess().getSinglelogalexpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicalExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryLogicalExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicalExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBinaryLogicalExpAccess().getBinariesAssignment_1()); }
		(rule__BinaryLogicalExp__BinariesAssignment_1)
		{ after(grammarAccess.getBinaryLogicalExpAccess().getBinariesAssignment_1()); }
	)
	(
		{ before(grammarAccess.getBinaryLogicalExpAccess().getBinariesAssignment_1()); }
		(rule__BinaryLogicalExp__BinariesAssignment_1)*
		{ after(grammarAccess.getBinaryLogicalExpAccess().getBinariesAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__0__Impl
	rule__Not__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotAction_0()); }
	()
	{ after(grammarAccess.getNotAccess().getNotAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotKeyword_1()); }
	'not'
	{ after(grammarAccess.getNotAccess().getNotKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndAction_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
	rule__And__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndKeyword_1()); }
	'and'
	{ after(grammarAccess.getAndAccess().getAndKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getSinglelogalexpAssignment_2()); }
	(rule__And__SinglelogalexpAssignment_2)
	{ after(grammarAccess.getAndAccess().getSinglelogalexpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrAction_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
	rule__Or__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrKeyword_1()); }
	'or'
	{ after(grammarAccess.getOrAccess().getOrKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getSinglelogalexpAssignment_2()); }
	(rule__Or__SinglelogalexpAssignment_2)
	{ after(grammarAccess.getOrAccess().getSinglelogalexpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Script__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScriptAccess().getNameNAMETerminalRuleCall_2_0()); }
		RULE_NAME
		{ after(grammarAccess.getScriptAccess().getNameNAMETerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__StatementsAssignment_5_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScriptAccess().getStatementsStatementsParserRuleCall_5_0_0()); }
		ruleStatements
		{ after(grammarAccess.getScriptAccess().getStatementsStatementsParserRuleCall_5_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__StatementsAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScriptAccess().getStatementsStatementsParserRuleCall_5_1_0()); }
		ruleStatements
		{ after(grammarAccess.getScriptAccess().getStatementsStatementsParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__LogicalexpsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getLogicalexpsLogicalExpsParserRuleCall_2_0()); }
		ruleLogicalExps
		{ after(grammarAccess.getIfStatementAccess().getLogicalexpsLogicalExpsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__RunningstatementsAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getRunningstatementsRunningStatementsParserRuleCall_4_0_0()); }
		ruleRunningStatements
		{ after(grammarAccess.getIfStatementAccess().getRunningstatementsRunningStatementsParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__RunningstatementsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getRunningstatementsRunningStatementsParserRuleCall_4_1_0()); }
		ruleRunningStatements
		{ after(grammarAccess.getIfStatementAccess().getRunningstatementsRunningStatementsParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getElseElseParserRuleCall_6_0()); }
		ruleElse
		{ after(grammarAccess.getIfStatementAccess().getElseElseParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__LogicalexpsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileStatementAccess().getLogicalexpsLogicalExpsParserRuleCall_2_0()); }
		ruleLogicalExps
		{ after(grammarAccess.getWhileStatementAccess().getLogicalexpsLogicalExpsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__RunningstatementsAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileStatementAccess().getRunningstatementsRunningStatementsParserRuleCall_4_0_0()); }
		ruleRunningStatements
		{ after(grammarAccess.getWhileStatementAccess().getRunningstatementsRunningStatementsParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__RunningstatementsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileStatementAccess().getRunningstatementsRunningStatementsParserRuleCall_4_1_0()); }
		ruleRunningStatements
		{ after(grammarAccess.getWhileStatementAccess().getRunningstatementsRunningStatementsParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__TimeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatStatementAccess().getTimeEIntParserRuleCall_2_0()); }
		ruleEInt
		{ after(grammarAccess.getRepeatStatementAccess().getTimeEIntParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__CommandstatementAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatStatementAccess().getCommandstatementCommandStatementParserRuleCall_4_0_0()); }
		ruleCommandStatement
		{ after(grammarAccess.getRepeatStatementAccess().getCommandstatementCommandStatementParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__CommandstatementAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatStatementAccess().getCommandstatementCommandStatementParserRuleCall_4_1_0()); }
		ruleCommandStatement
		{ after(grammarAccess.getRepeatStatementAccess().getCommandstatementCommandStatementParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceMessage__MessageAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraceMessageAccess().getMessageMessagesParserRuleCall_2_0()); }
		ruleMessages
		{ after(grammarAccess.getTraceMessageAccess().getMessageMessagesParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__CommentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommentAccess().getCommentCOMMENTSTerminalRuleCall_1_0()); }
		RULE_COMMENTS
		{ after(grammarAccess.getCommentAccess().getCommentCOMMENTSTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWall__RowAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDestroyWallAccess().getRowINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getDestroyWallAccess().getRowINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWall__ColumnAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDestroyWallAccess().getColumnINTTerminalRuleCall_6_0()); }
		RULE_INT
		{ after(grammarAccess.getDestroyWallAccess().getColumnINTTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMark__RowAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPickMarkAccess().getRowINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getPickMarkAccess().getRowINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMark__ColumnAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPickMarkAccess().getColumnINTTerminalRuleCall_6_0()); }
		RULE_INT
		{ after(grammarAccess.getPickMarkAccess().getColumnINTTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMark__RowAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDropMarkAccess().getRowINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getDropMarkAccess().getRowINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMark__ColumnAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDropMarkAccess().getColumnINTTerminalRuleCall_6_0()); }
		RULE_INT
		{ after(grammarAccess.getDropMarkAccess().getColumnINTTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWall__RowAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBuildWallAccess().getRowINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getBuildWallAccess().getRowINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWall__ColumnAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBuildWallAccess().getColumnINTTerminalRuleCall_6_0()); }
		RULE_INT
		{ after(grammarAccess.getBuildWallAccess().getColumnINTTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__RunningstatementsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseAccess().getRunningstatementsRunningStatementsParserRuleCall_3_0_0()); }
		ruleRunningStatements
		{ after(grammarAccess.getElseAccess().getRunningstatementsRunningStatementsParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__RunningstatementsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseAccess().getRunningstatementsRunningStatementsParserRuleCall_3_1_0()); }
		ruleRunningStatements
		{ after(grammarAccess.getElseAccess().getRunningstatementsRunningStatementsParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Full__NotAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFullAccess().getNotNotParserRuleCall_1_0()); }
		ruleNot
		{ after(grammarAccess.getFullAccess().getNotNotParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__NotAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMarkAccess().getNotNotParserRuleCall_1_0()); }
		ruleNot
		{ after(grammarAccess.getMarkAccess().getNotNotParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAhead__NotAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWallAheadAccess().getNotNotParserRuleCall_1_0()); }
		ruleNot
		{ after(grammarAccess.getWallAheadAccess().getNotNotParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Heading__NotAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadingAccess().getNotNotParserRuleCall_1_0()); }
		ruleNot
		{ after(grammarAccess.getHeadingAccess().getNotNotParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Heading__DirectionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadingAccess().getDirectionDirectionsEnumRuleCall_3_0()); }
		ruleDirections
		{ after(grammarAccess.getHeadingAccess().getDirectionDirectionsEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicalExp__SinglelogalexpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryLogicalExpAccess().getSinglelogalexpSingleLogalExpParserRuleCall_0_0()); }
		ruleSingleLogalExp
		{ after(grammarAccess.getBinaryLogicalExpAccess().getSinglelogalexpSingleLogalExpParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicalExp__BinariesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryLogicalExpAccess().getBinariesBinariesParserRuleCall_1_0()); }
		ruleBinaries
		{ after(grammarAccess.getBinaryLogicalExpAccess().getBinariesBinariesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__SinglelogalexpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getSinglelogalexpSingleLogalExpParserRuleCall_2_0()); }
		ruleSingleLogalExp
		{ after(grammarAccess.getAndAccess().getSinglelogalexpSingleLogalExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__SinglelogalexpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getSinglelogalexpSingleLogalExpParserRuleCall_2_0()); }
		ruleSingleLogalExp
		{ after(grammarAccess.getOrAccess().getSinglelogalexpSingleLogalExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_COMMENTS : '#' ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|' '|'!'|'*'|'&'|'^'|'%'|'$'|'@'|'('|')'|'-'|'='|'+'|'['|']'|'{'|'}'|';'|':'|','|'<'|'.'|'/'|'>'|'?')* '\n';

RULE_NAME : ('a'..'z'|'A'..'Z')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
