/*
 * generated by Xtext 2.11.0
 */
grammar InternalRobotDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package glt.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package glt.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import glt.services.RobotDSLGrammarAccess;

}

@parser::members {

 	private RobotDSLGrammarAccess grammarAccess;

    public InternalRobotDSLParser(TokenStream input, RobotDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Script";
   	}

   	@Override
   	protected RobotDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	iv_ruleScript=ruleScript
	{ $current=$iv_ruleScript.current; }
	EOF;

// Rule Script
ruleScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getScriptAccess().getScriptAction_0(),
					$current);
			}
		)
		otherlv_1='Script'
		{
			newLeafNode(otherlv_1, grammarAccess.getScriptAccess().getScriptKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_NAME
				{
					newLeafNode(lv_name_2_0, grammarAccess.getScriptAccess().getNameNAMETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScriptRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"glt.RobotDSL.NAME");
				}
			)
		)
		otherlv_3='runs'
		{
			newLeafNode(otherlv_3, grammarAccess.getScriptAccess().getRunsKeyword_3());
		}
		otherlv_4='as'
		{
			newLeafNode(otherlv_4, grammarAccess.getScriptAccess().getAsKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getScriptAccess().getStatementsStatementsParserRuleCall_5_0_0());
					}
					lv_statements_5_0=ruleStatements
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScriptRule());
						}
						add(
							$current,
							"statements",
							lv_statements_5_0,
							"glt.RobotDSL.Statements");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getScriptAccess().getStatementsStatementsParserRuleCall_5_1_0());
					}
					lv_statements_6_0=ruleStatements
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScriptRule());
						}
						add(
							$current,
							"statements",
							lv_statements_6_0,
							"glt.RobotDSL.Statements");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_7='end'
		{
			newLeafNode(otherlv_7, grammarAccess.getScriptAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRuleStatements
entryRuleStatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementsRule()); }
	iv_ruleStatements=ruleStatements
	{ $current=$iv_ruleStatements.current; }
	EOF;

// Rule Statements
ruleStatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getIfStatementParserRuleCall_0());
		}
		this_IfStatement_0=ruleIfStatement
		{
			$current = $this_IfStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getWhileStatementParserRuleCall_1());
		}
		this_WhileStatement_1=ruleWhileStatement
		{
			$current = $this_WhileStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getRepeatStatementParserRuleCall_2());
		}
		this_RepeatStatement_2=ruleRepeatStatement
		{
			$current = $this_RepeatStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getStepParserRuleCall_3());
		}
		this_Step_3=ruleStep
		{
			$current = $this_Step_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getTurnLeftParserRuleCall_4());
		}
		this_TurnLeft_4=ruleTurnLeft
		{
			$current = $this_TurnLeft_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getDropParserRuleCall_5());
		}
		this_Drop_5=ruleDrop
		{
			$current = $this_Drop_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getPickParserRuleCall_6());
		}
		this_Pick_6=rulePick
		{
			$current = $this_Pick_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getTraceMessageParserRuleCall_7());
		}
		this_TraceMessage_7=ruleTraceMessage
		{
			$current = $this_TraceMessage_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getCommentParserRuleCall_8());
		}
		this_Comment_8=ruleComment
		{
			$current = $this_Comment_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getDestroyWallParserRuleCall_9());
		}
		this_DestroyWall_9=ruleDestroyWall
		{
			$current = $this_DestroyWall_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getPickMarkParserRuleCall_10());
		}
		this_PickMark_10=rulePickMark
		{
			$current = $this_PickMark_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getDropMarkParserRuleCall_11());
		}
		this_DropMark_11=ruleDropMark
		{
			$current = $this_DropMark_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getBuildWallParserRuleCall_12());
		}
		this_BuildWall_12=ruleBuildWall
		{
			$current = $this_BuildWall_12.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLogicalExps
entryRuleLogicalExps returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalExpsRule()); }
	iv_ruleLogicalExps=ruleLogicalExps
	{ $current=$iv_ruleLogicalExps.current; }
	EOF;

// Rule LogicalExps
ruleLogicalExps returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalExpsAccess().getFullParserRuleCall_0());
		}
		this_Full_0=ruleFull
		{
			$current = $this_Full_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLogicalExpsAccess().getMarkParserRuleCall_1());
		}
		this_Mark_1=ruleMark
		{
			$current = $this_Mark_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLogicalExpsAccess().getWallAheadParserRuleCall_2());
		}
		this_WallAhead_2=ruleWallAhead
		{
			$current = $this_WallAhead_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLogicalExpsAccess().getHeadingParserRuleCall_3());
		}
		this_Heading_3=ruleHeading
		{
			$current = $this_Heading_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLogicalExpsAccess().getBinaryLogicalExpParserRuleCall_4());
		}
		this_BinaryLogicalExp_4=ruleBinaryLogicalExp
		{
			$current = $this_BinaryLogicalExp_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRunningStatements
entryRuleRunningStatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRunningStatementsRule()); }
	iv_ruleRunningStatements=ruleRunningStatements
	{ $current=$iv_ruleRunningStatements.current; }
	EOF;

// Rule RunningStatements
ruleRunningStatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRunningStatementsAccess().getIfStatementParserRuleCall_0());
		}
		this_IfStatement_0=ruleIfStatement
		{
			$current = $this_IfStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRunningStatementsAccess().getWhileStatementParserRuleCall_1());
		}
		this_WhileStatement_1=ruleWhileStatement
		{
			$current = $this_WhileStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRunningStatementsAccess().getRepeatStatementParserRuleCall_2());
		}
		this_RepeatStatement_2=ruleRepeatStatement
		{
			$current = $this_RepeatStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRunningStatementsAccess().getStepParserRuleCall_3());
		}
		this_Step_3=ruleStep
		{
			$current = $this_Step_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRunningStatementsAccess().getTurnLeftParserRuleCall_4());
		}
		this_TurnLeft_4=ruleTurnLeft
		{
			$current = $this_TurnLeft_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRunningStatementsAccess().getDropParserRuleCall_5());
		}
		this_Drop_5=ruleDrop
		{
			$current = $this_Drop_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRunningStatementsAccess().getPickParserRuleCall_6());
		}
		this_Pick_6=rulePick
		{
			$current = $this_Pick_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRunningStatementsAccess().getTraceMessageParserRuleCall_7());
		}
		this_TraceMessage_7=ruleTraceMessage
		{
			$current = $this_TraceMessage_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRunningStatementsAccess().getCommentParserRuleCall_8());
		}
		this_Comment_8=ruleComment
		{
			$current = $this_Comment_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCommandStatement
entryRuleCommandStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandStatementRule()); }
	iv_ruleCommandStatement=ruleCommandStatement
	{ $current=$iv_ruleCommandStatement.current; }
	EOF;

// Rule CommandStatement
ruleCommandStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandStatementAccess().getStepParserRuleCall_0());
		}
		this_Step_0=ruleStep
		{
			$current = $this_Step_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandStatementAccess().getTurnLeftParserRuleCall_1());
		}
		this_TurnLeft_1=ruleTurnLeft
		{
			$current = $this_TurnLeft_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandStatementAccess().getDropParserRuleCall_2());
		}
		this_Drop_2=ruleDrop
		{
			$current = $this_Drop_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandStatementAccess().getPickParserRuleCall_3());
		}
		this_Pick_3=rulePick
		{
			$current = $this_Pick_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandStatementAccess().getTraceMessageParserRuleCall_4());
		}
		this_TraceMessage_4=ruleTraceMessage
		{
			$current = $this_TraceMessage_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandStatementAccess().getCommentParserRuleCall_5());
		}
		this_Comment_5=ruleComment
		{
			$current = $this_Comment_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBinaries
entryRuleBinaries returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinariesRule()); }
	iv_ruleBinaries=ruleBinaries
	{ $current=$iv_ruleBinaries.current; }
	EOF;

// Rule Binaries
ruleBinaries returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBinariesAccess().getBinaries_ImplParserRuleCall_0());
		}
		this_Binaries_Impl_0=ruleBinaries_Impl
		{
			$current = $this_Binaries_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBinariesAccess().getAndParserRuleCall_1());
		}
		this_And_1=ruleAnd
		{
			$current = $this_And_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBinariesAccess().getOrParserRuleCall_2());
		}
		this_Or_2=ruleOr
		{
			$current = $this_Or_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSingleLogalExp
entryRuleSingleLogalExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleLogalExpRule()); }
	iv_ruleSingleLogalExp=ruleSingleLogalExp
	{ $current=$iv_ruleSingleLogalExp.current; }
	EOF;

// Rule SingleLogalExp
ruleSingleLogalExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSingleLogalExpAccess().getSingleLogalExp_ImplParserRuleCall_0());
		}
		this_SingleLogalExp_Impl_0=ruleSingleLogalExp_Impl
		{
			$current = $this_SingleLogalExp_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSingleLogalExpAccess().getFullParserRuleCall_1());
		}
		this_Full_1=ruleFull
		{
			$current = $this_Full_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSingleLogalExpAccess().getMarkParserRuleCall_2());
		}
		this_Mark_2=ruleMark
		{
			$current = $this_Mark_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSingleLogalExpAccess().getWallAheadParserRuleCall_3());
		}
		this_WallAhead_3=ruleWallAhead
		{
			$current = $this_WallAhead_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSingleLogalExpAccess().getHeadingParserRuleCall_4());
		}
		this_Heading_4=ruleHeading
		{
			$current = $this_Heading_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfStatementAccess().getIfStatementAction_0(),
					$current);
			}
		)
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getIfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getLogicalexpsLogicalExpsParserRuleCall_2_0());
				}
				lv_logicalexps_2_0=ruleLogicalExps
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"logicalexps",
						lv_logicalexps_2_0,
						"glt.RobotDSL.LogicalExps");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getRunningstatementsRunningStatementsParserRuleCall_3_0_0());
					}
					lv_runningstatements_3_0=ruleRunningStatements
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						add(
							$current,
							"runningstatements",
							lv_runningstatements_3_0,
							"glt.RobotDSL.RunningStatements");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getRunningstatementsRunningStatementsParserRuleCall_3_1_0());
					}
					lv_runningstatements_4_0=ruleRunningStatements
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						add(
							$current,
							"runningstatements",
							lv_runningstatements_4_0,
							"glt.RobotDSL.RunningStatements");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_5='end'
		{
			newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getEndKeyword_4());
		}
		(
			otherlv_6='else'
			{
				newLeafNode(otherlv_6, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
			}
			otherlv_7='do'
			{
				newLeafNode(otherlv_7, grammarAccess.getIfStatementAccess().getDoKeyword_5_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getIfStatementAccess().getRunningstatementsRunningStatementsParserRuleCall_5_2_0_0());
						}
						lv_runningstatements_8_0=ruleRunningStatements
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIfStatementRule());
							}
							add(
								$current,
								"runningstatements",
								lv_runningstatements_8_0,
								"glt.RobotDSL.RunningStatements");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getIfStatementAccess().getRunningstatementsRunningStatementsParserRuleCall_5_2_1_0());
						}
						lv_runningstatements_9_0=ruleRunningStatements
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIfStatementRule());
							}
							add(
								$current,
								"runningstatements",
								lv_runningstatements_9_0,
								"glt.RobotDSL.RunningStatements");
							afterParserOrEnumRuleCall();
						}
					)
				)*
			)?
			otherlv_10='end'
			{
				newLeafNode(otherlv_10, grammarAccess.getIfStatementAccess().getEndKeyword_5_3());
			}
		)?
	)
;

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	iv_ruleWhileStatement=ruleWhileStatement
	{ $current=$iv_ruleWhileStatement.current; }
	EOF;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWhileStatementAccess().getWhileStatementAction_0(),
					$current);
			}
		)
		otherlv_1='while'
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getWhileKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getLogicalexpsLogicalExpsParserRuleCall_2_0());
				}
				lv_logicalexps_2_0=ruleLogicalExps
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"logicalexps",
						lv_logicalexps_2_0,
						"glt.RobotDSL.LogicalExps");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getWhileStatementAccess().getRunningstatementsRunningStatementsParserRuleCall_3_0_0());
					}
					lv_runningstatements_3_0=ruleRunningStatements
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
						}
						add(
							$current,
							"runningstatements",
							lv_runningstatements_3_0,
							"glt.RobotDSL.RunningStatements");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getWhileStatementAccess().getRunningstatementsRunningStatementsParserRuleCall_3_1_0());
					}
					lv_runningstatements_4_0=ruleRunningStatements
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
						}
						add(
							$current,
							"runningstatements",
							lv_runningstatements_4_0,
							"glt.RobotDSL.RunningStatements");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_5='end'
		{
			newLeafNode(otherlv_5, grammarAccess.getWhileStatementAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleRepeatStatement
entryRuleRepeatStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeatStatementRule()); }
	iv_ruleRepeatStatement=ruleRepeatStatement
	{ $current=$iv_ruleRepeatStatement.current; }
	EOF;

// Rule RepeatStatement
ruleRepeatStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRepeatStatementAccess().getRepeatStatementAction_0(),
					$current);
			}
		)
		otherlv_1='repeat'
		{
			newLeafNode(otherlv_1, grammarAccess.getRepeatStatementAccess().getRepeatKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatStatementAccess().getTimeEIntParserRuleCall_2_0());
				}
				lv_time_2_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatStatementRule());
					}
					set(
						$current,
						"time",
						lv_time_2_0,
						"glt.RobotDSL.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='times'
		{
			newLeafNode(otherlv_3, grammarAccess.getRepeatStatementAccess().getTimesKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRepeatStatementAccess().getCommandstatementCommandStatementParserRuleCall_4_0_0());
					}
					lv_commandstatement_4_0=ruleCommandStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRepeatStatementRule());
						}
						add(
							$current,
							"commandstatement",
							lv_commandstatement_4_0,
							"glt.RobotDSL.CommandStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRepeatStatementAccess().getCommandstatementCommandStatementParserRuleCall_4_1_0());
					}
					lv_commandstatement_5_0=ruleCommandStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRepeatStatementRule());
						}
						add(
							$current,
							"commandstatement",
							lv_commandstatement_5_0,
							"glt.RobotDSL.CommandStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_6='end'
		{
			newLeafNode(otherlv_6, grammarAccess.getRepeatStatementAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleStep
entryRuleStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStepRule()); }
	iv_ruleStep=ruleStep
	{ $current=$iv_ruleStep.current; }
	EOF;

// Rule Step
ruleStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStepAccess().getStepAction_0(),
					$current);
			}
		)
		otherlv_1='step'
		{
			newLeafNode(otherlv_1, grammarAccess.getStepAccess().getStepKeyword_1());
		}
	)
;

// Entry rule entryRuleTurnLeft
entryRuleTurnLeft returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTurnLeftRule()); }
	iv_ruleTurnLeft=ruleTurnLeft
	{ $current=$iv_ruleTurnLeft.current; }
	EOF;

// Rule TurnLeft
ruleTurnLeft returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTurnLeftAccess().getTurnLeftAction_0(),
					$current);
			}
		)
		otherlv_1='turnLeft'
		{
			newLeafNode(otherlv_1, grammarAccess.getTurnLeftAccess().getTurnLeftKeyword_1());
		}
	)
;

// Entry rule entryRuleDrop
entryRuleDrop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDropRule()); }
	iv_ruleDrop=ruleDrop
	{ $current=$iv_ruleDrop.current; }
	EOF;

// Rule Drop
ruleDrop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDropAccess().getDropAction_0(),
					$current);
			}
		)
		otherlv_1='drop'
		{
			newLeafNode(otherlv_1, grammarAccess.getDropAccess().getDropKeyword_1());
		}
	)
;

// Entry rule entryRulePick
entryRulePick returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPickRule()); }
	iv_rulePick=rulePick
	{ $current=$iv_rulePick.current; }
	EOF;

// Rule Pick
rulePick returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPickAccess().getPickAction_0(),
					$current);
			}
		)
		otherlv_1='pick'
		{
			newLeafNode(otherlv_1, grammarAccess.getPickAccess().getPickKeyword_1());
		}
	)
;

// Entry rule entryRuleTraceMessage
entryRuleTraceMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTraceMessageRule()); }
	iv_ruleTraceMessage=ruleTraceMessage
	{ $current=$iv_ruleTraceMessage.current; }
	EOF;

// Rule TraceMessage
ruleTraceMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTraceMessageAccess().getTraceMessageAction_0(),
					$current);
			}
		)
		otherlv_1='trace'
		{
			newLeafNode(otherlv_1, grammarAccess.getTraceMessageAccess().getTraceKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTraceMessageAccess().getMessageMessagesParserRuleCall_2_0());
				}
				lv_message_2_0=ruleMessages
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTraceMessageRule());
					}
					set(
						$current,
						"message",
						lv_message_2_0,
						"glt.RobotDSL.Messages");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComment
entryRuleComment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommentRule()); }
	iv_ruleComment=ruleComment
	{ $current=$iv_ruleComment.current; }
	EOF;

// Rule Comment
ruleComment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCommentAccess().getCommentAction_0(),
					$current);
			}
		)
		otherlv_1='#'
		{
			newLeafNode(otherlv_1, grammarAccess.getCommentAccess().getNumberSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCommentAccess().getCommentCommentsParserRuleCall_2_0());
				}
				lv_comment_2_0=ruleComments
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommentRule());
					}
					set(
						$current,
						"comment",
						lv_comment_2_0,
						"glt.RobotDSL.Comments");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDestroyWall
entryRuleDestroyWall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDestroyWallRule()); }
	iv_ruleDestroyWall=ruleDestroyWall
	{ $current=$iv_ruleDestroyWall.current; }
	EOF;

// Rule DestroyWall
ruleDestroyWall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDestroyWallAccess().getDestroyWallAction_0(),
					$current);
			}
		)
		otherlv_1='buildWall'
		{
			newLeafNode(otherlv_1, grammarAccess.getDestroyWallAccess().getBuildWallKeyword_1());
		}
		otherlv_2='at'
		{
			newLeafNode(otherlv_2, grammarAccess.getDestroyWallAccess().getAtKeyword_2());
		}
		otherlv_3='row:'
		{
			newLeafNode(otherlv_3, grammarAccess.getDestroyWallAccess().getRowKeyword_3());
		}
		(
			(
				lv_row_4_0=RULE_INT
				{
					newLeafNode(lv_row_4_0, grammarAccess.getDestroyWallAccess().getRowINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDestroyWallRule());
					}
					setWithLastConsumed(
						$current,
						"row",
						lv_row_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5='column:'
		{
			newLeafNode(otherlv_5, grammarAccess.getDestroyWallAccess().getColumnKeyword_5());
		}
		(
			(
				lv_column_6_0=RULE_INT
				{
					newLeafNode(lv_column_6_0, grammarAccess.getDestroyWallAccess().getColumnINTTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDestroyWallRule());
					}
					setWithLastConsumed(
						$current,
						"column",
						lv_column_6_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRulePickMark
entryRulePickMark returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPickMarkRule()); }
	iv_rulePickMark=rulePickMark
	{ $current=$iv_rulePickMark.current; }
	EOF;

// Rule PickMark
rulePickMark returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPickMarkAccess().getPickMarkAction_0(),
					$current);
			}
		)
		otherlv_1='PickMark'
		{
			newLeafNode(otherlv_1, grammarAccess.getPickMarkAccess().getPickMarkKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPickMarkAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='row'
			{
				newLeafNode(otherlv_3, grammarAccess.getPickMarkAccess().getRowKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPickMarkAccess().getRowEIntParserRuleCall_3_1_0());
					}
					lv_row_4_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPickMarkRule());
						}
						set(
							$current,
							"row",
							lv_row_4_0,
							"glt.RobotDSL.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='column'
			{
				newLeafNode(otherlv_5, grammarAccess.getPickMarkAccess().getColumnKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPickMarkAccess().getColumnEIntParserRuleCall_4_1_0());
					}
					lv_column_6_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPickMarkRule());
						}
						set(
							$current,
							"column",
							lv_column_6_0,
							"glt.RobotDSL.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getPickMarkAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleDropMark
entryRuleDropMark returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDropMarkRule()); }
	iv_ruleDropMark=ruleDropMark
	{ $current=$iv_ruleDropMark.current; }
	EOF;

// Rule DropMark
ruleDropMark returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDropMarkAccess().getDropMarkAction_0(),
					$current);
			}
		)
		otherlv_1='DropMark'
		{
			newLeafNode(otherlv_1, grammarAccess.getDropMarkAccess().getDropMarkKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDropMarkAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='row'
			{
				newLeafNode(otherlv_3, grammarAccess.getDropMarkAccess().getRowKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDropMarkAccess().getRowEIntParserRuleCall_3_1_0());
					}
					lv_row_4_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDropMarkRule());
						}
						set(
							$current,
							"row",
							lv_row_4_0,
							"glt.RobotDSL.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='column'
			{
				newLeafNode(otherlv_5, grammarAccess.getDropMarkAccess().getColumnKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDropMarkAccess().getColumnEIntParserRuleCall_4_1_0());
					}
					lv_column_6_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDropMarkRule());
						}
						set(
							$current,
							"column",
							lv_column_6_0,
							"glt.RobotDSL.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getDropMarkAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleBuildWall
entryRuleBuildWall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBuildWallRule()); }
	iv_ruleBuildWall=ruleBuildWall
	{ $current=$iv_ruleBuildWall.current; }
	EOF;

// Rule BuildWall
ruleBuildWall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBuildWallAccess().getBuildWallAction_0(),
					$current);
			}
		)
		otherlv_1='BuildWall'
		{
			newLeafNode(otherlv_1, grammarAccess.getBuildWallAccess().getBuildWallKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getBuildWallAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='row'
			{
				newLeafNode(otherlv_3, grammarAccess.getBuildWallAccess().getRowKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBuildWallAccess().getRowEIntParserRuleCall_3_1_0());
					}
					lv_row_4_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBuildWallRule());
						}
						set(
							$current,
							"row",
							lv_row_4_0,
							"glt.RobotDSL.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='column'
			{
				newLeafNode(otherlv_5, grammarAccess.getBuildWallAccess().getColumnKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBuildWallAccess().getColumnEIntParserRuleCall_4_1_0());
					}
					lv_column_6_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBuildWallRule());
						}
						set(
							$current,
							"column",
							lv_column_6_0,
							"glt.RobotDSL.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getBuildWallAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleFull
entryRuleFull returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFullRule()); }
	iv_ruleFull=ruleFull
	{ $current=$iv_ruleFull.current; }
	EOF;

// Rule Full
ruleFull returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFullAccess().getFullAction_0(),
					$current);
			}
		)
		otherlv_1='Full'
		{
			newLeafNode(otherlv_1, grammarAccess.getFullAccess().getFullKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getFullAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='not'
			{
				newLeafNode(otherlv_3, grammarAccess.getFullAccess().getNotKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFullAccess().getNotNotParserRuleCall_3_1_0());
					}
					lv_not_4_0=ruleNot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFullRule());
						}
						set(
							$current,
							"not",
							lv_not_4_0,
							"glt.RobotDSL.Not");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getFullAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleMark
entryRuleMark returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMarkRule()); }
	iv_ruleMark=ruleMark
	{ $current=$iv_ruleMark.current; }
	EOF;

// Rule Mark
ruleMark returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMarkAccess().getMarkAction_0(),
					$current);
			}
		)
		otherlv_1='Mark'
		{
			newLeafNode(otherlv_1, grammarAccess.getMarkAccess().getMarkKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getMarkAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='not'
			{
				newLeafNode(otherlv_3, grammarAccess.getMarkAccess().getNotKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMarkAccess().getNotNotParserRuleCall_3_1_0());
					}
					lv_not_4_0=ruleNot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMarkRule());
						}
						set(
							$current,
							"not",
							lv_not_4_0,
							"glt.RobotDSL.Not");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getMarkAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleWallAhead
entryRuleWallAhead returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWallAheadRule()); }
	iv_ruleWallAhead=ruleWallAhead
	{ $current=$iv_ruleWallAhead.current; }
	EOF;

// Rule WallAhead
ruleWallAhead returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWallAheadAccess().getWallAheadAction_0(),
					$current);
			}
		)
		otherlv_1='WallAhead'
		{
			newLeafNode(otherlv_1, grammarAccess.getWallAheadAccess().getWallAheadKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getWallAheadAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='not'
			{
				newLeafNode(otherlv_3, grammarAccess.getWallAheadAccess().getNotKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getWallAheadAccess().getNotNotParserRuleCall_3_1_0());
					}
					lv_not_4_0=ruleNot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWallAheadRule());
						}
						set(
							$current,
							"not",
							lv_not_4_0,
							"glt.RobotDSL.Not");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getWallAheadAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleHeading
entryRuleHeading returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeadingRule()); }
	iv_ruleHeading=ruleHeading
	{ $current=$iv_ruleHeading.current; }
	EOF;

// Rule Heading
ruleHeading returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getHeadingAccess().getHeadingAction_0(),
					$current);
			}
		)
		otherlv_1='Heading'
		{
			newLeafNode(otherlv_1, grammarAccess.getHeadingAccess().getHeadingKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getHeadingAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='direction'
			{
				newLeafNode(otherlv_3, grammarAccess.getHeadingAccess().getDirectionKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getHeadingAccess().getDirectionDirectionsEnumRuleCall_3_1_0());
					}
					lv_direction_4_0=ruleDirections
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHeadingRule());
						}
						set(
							$current,
							"direction",
							lv_direction_4_0,
							"glt.RobotDSL.Directions");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='not'
			{
				newLeafNode(otherlv_5, grammarAccess.getHeadingAccess().getNotKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getHeadingAccess().getNotNotParserRuleCall_4_1_0());
					}
					lv_not_6_0=ruleNot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHeadingRule());
						}
						set(
							$current,
							"not",
							lv_not_6_0,
							"glt.RobotDSL.Not");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getHeadingAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleSingleLogalExp_Impl
entryRuleSingleLogalExp_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleLogalExp_ImplRule()); }
	iv_ruleSingleLogalExp_Impl=ruleSingleLogalExp_Impl
	{ $current=$iv_ruleSingleLogalExp_Impl.current; }
	EOF;

// Rule SingleLogalExp_Impl
ruleSingleLogalExp_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSingleLogalExp_ImplAccess().getSingleLogalExpAction_0(),
					$current);
			}
		)
		otherlv_1='SingleLogalExp'
		{
			newLeafNode(otherlv_1, grammarAccess.getSingleLogalExp_ImplAccess().getSingleLogalExpKeyword_1());
		}
	)
;

// Entry rule entryRuleBinaryLogicalExp
entryRuleBinaryLogicalExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryLogicalExpRule()); }
	iv_ruleBinaryLogicalExp=ruleBinaryLogicalExp
	{ $current=$iv_ruleBinaryLogicalExp.current; }
	EOF;

// Rule BinaryLogicalExp
ruleBinaryLogicalExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='BinaryLogicalExp'
		{
			newLeafNode(otherlv_0, grammarAccess.getBinaryLogicalExpAccess().getBinaryLogicalExpKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBinaryLogicalExpAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='binaries'
		{
			newLeafNode(otherlv_2, grammarAccess.getBinaryLogicalExpAccess().getBinariesKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getBinaryLogicalExpAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryLogicalExpAccess().getBinariesBinariesParserRuleCall_4_0());
				}
				lv_binaries_4_0=ruleBinaries
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryLogicalExpRule());
					}
					add(
						$current,
						"binaries",
						lv_binaries_4_0,
						"glt.RobotDSL.Binaries");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getBinaryLogicalExpAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBinaryLogicalExpAccess().getBinariesBinariesParserRuleCall_5_1_0());
					}
					lv_binaries_6_0=ruleBinaries
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBinaryLogicalExpRule());
						}
						add(
							$current,
							"binaries",
							lv_binaries_6_0,
							"glt.RobotDSL.Binaries");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getBinaryLogicalExpAccess().getRightCurlyBracketKeyword_6());
		}
		otherlv_8='singlelogalexp'
		{
			newLeafNode(otherlv_8, grammarAccess.getBinaryLogicalExpAccess().getSinglelogalexpKeyword_7());
		}
		otherlv_9='{'
		{
			newLeafNode(otherlv_9, grammarAccess.getBinaryLogicalExpAccess().getLeftCurlyBracketKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryLogicalExpAccess().getSinglelogalexpSingleLogalExpParserRuleCall_9_0());
				}
				lv_singlelogalexp_10_0=ruleSingleLogalExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryLogicalExpRule());
					}
					add(
						$current,
						"singlelogalexp",
						lv_singlelogalexp_10_0,
						"glt.RobotDSL.SingleLogalExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_11=','
			{
				newLeafNode(otherlv_11, grammarAccess.getBinaryLogicalExpAccess().getCommaKeyword_10_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBinaryLogicalExpAccess().getSinglelogalexpSingleLogalExpParserRuleCall_10_1_0());
					}
					lv_singlelogalexp_12_0=ruleSingleLogalExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBinaryLogicalExpRule());
						}
						add(
							$current,
							"singlelogalexp",
							lv_singlelogalexp_12_0,
							"glt.RobotDSL.SingleLogalExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_13='}'
		{
			newLeafNode(otherlv_13, grammarAccess.getBinaryLogicalExpAccess().getRightCurlyBracketKeyword_11());
		}
		otherlv_14='}'
		{
			newLeafNode(otherlv_14, grammarAccess.getBinaryLogicalExpAccess().getRightCurlyBracketKeyword_12());
		}
	)
;

// Entry rule entryRuleNot
entryRuleNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	iv_ruleNot=ruleNot
	{ $current=$iv_ruleNot.current; }
	EOF;

// Rule Not
ruleNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNotAccess().getNotAction_0(),
					$current);
			}
		)
		otherlv_1='Not'
		{
			newLeafNode(otherlv_1, grammarAccess.getNotAccess().getNotKeyword_1());
		}
	)
;

// Entry rule entryRuleBinaries_Impl
entryRuleBinaries_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaries_ImplRule()); }
	iv_ruleBinaries_Impl=ruleBinaries_Impl
	{ $current=$iv_ruleBinaries_Impl.current; }
	EOF;

// Rule Binaries_Impl
ruleBinaries_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBinaries_ImplAccess().getBinariesAction_0(),
					$current);
			}
		)
		otherlv_1='Binaries'
		{
			newLeafNode(otherlv_1, grammarAccess.getBinaries_ImplAccess().getBinariesKeyword_1());
		}
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAndAccess().getAndAction_0(),
					$current);
			}
		)
		otherlv_1='And'
		{
			newLeafNode(otherlv_1, grammarAccess.getAndAccess().getAndKeyword_1());
		}
	)
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOrAccess().getOrAction_0(),
					$current);
			}
		)
		otherlv_1='Or'
		{
			newLeafNode(otherlv_1, grammarAccess.getOrAccess().getOrKeyword_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleMessages
entryRuleMessages returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMessagesRule()); }
	iv_ruleMessages=ruleMessages
	{ $current=$iv_ruleMessages.current.getText(); }
	EOF;

// Rule Messages
ruleMessages returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getMessagesAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleComments
entryRuleComments returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommentsRule()); }
	iv_ruleComments=ruleComments
	{ $current=$iv_ruleComments.current.getText(); }
	EOF;

// Rule Comments
ruleComments returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_WS_0=RULE_WS
			{
				$current.merge(this_WS_0);
			}
			{
				newLeafNode(this_WS_0, grammarAccess.getCommentsAccess().getWSTerminalRuleCall_0());
			}
		)*
		{
			newCompositeNode(grammarAccess.getCommentsAccess().getEStringParserRuleCall_1());
		}
		this_EString_1=ruleEString
		{
			$current.merge(this_EString_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)*
;

// Rule Directions
ruleDirections returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='south'
			{
				$current = grammarAccess.getDirectionsAccess().getSouthEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDirectionsAccess().getSouthEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='north'
			{
				$current = grammarAccess.getDirectionsAccess().getNorthEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDirectionsAccess().getNorthEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='west'
			{
				$current = grammarAccess.getDirectionsAccess().getWestEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDirectionsAccess().getWestEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='east'
			{
				$current = grammarAccess.getDirectionsAccess().getEastEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getDirectionsAccess().getEastEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_NAME : ('a'..'z'|'A'..'Z')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
