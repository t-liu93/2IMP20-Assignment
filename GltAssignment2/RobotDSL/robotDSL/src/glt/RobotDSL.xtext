// automatically generated by Xtext
grammar glt.RobotDSL with org.eclipse.xtext.common.Terminals

import "robotDSLEcore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Script returns Script:
	{Script}
	'Script'
	name=NAME
	'runs'
	'as'
	( statements+=Statements ( statements+=Statements)* )?
	'end'
	;

Statements returns Statements:
	IfStatement | WhileStatement | RepeatStatement | Step | TurnLeft | Drop | Pick | TraceMessage | Comment | DestroyWall | PickMark | DropMark | BuildWall;

LogicalExps returns LogicalExps:
	Full | Mark | WallAhead | Heading | BinaryLogicalExp;

RunningStatements returns RunningStatements:
	IfStatement | WhileStatement | RepeatStatement | Step | TurnLeft | Drop | Pick | TraceMessage | Comment;

CommandStatement returns CommandStatement:
	Step | TurnLeft | Drop | Pick | TraceMessage | Comment;


Binaries returns Binaries:
	And | Or;

SingleLogalExp returns SingleLogalExp:
	Full | Mark | WallAhead | Heading;

EString returns ecore::EString:
	STRING | ID;

Statements_Impl returns Statements:
	{Statements}
	'Statements'
	;

CommandStatement_Impl returns CommandStatement:
	{CommandStatement}
	'CommandStatement'
	;

IfStatement returns IfStatement:
	{IfStatement}
	'if'
	logicalexps=LogicalExps
	'do'
	( runningstatements+=RunningStatements ( runningstatements+=RunningStatements)* )?
	'end'
	( else=Else )?
	;

WhileStatement returns WhileStatement:
	{WhileStatement}
	'while'
	logicalexps=LogicalExps
	'do'
	( runningstatements+=RunningStatements ( runningstatements+=RunningStatements)* )?
	'end'
	;

RepeatStatement returns RepeatStatement:
	{RepeatStatement}
	'repeat'
	time=EInt
	'times'
	( commandstatement+=CommandStatement ( commandstatement+=CommandStatement)* )?
	'end'
	;

Step returns Step:
	{Step}
	'step'
	;

TurnLeft returns TurnLeft:
	{TurnLeft}
	'turnLeft'
	;

Drop returns Drop:
	{Drop}
	'drop'
	;

Pick returns Pick:
	{Pick}
	'pick'
	;

TraceMessage returns TraceMessage:
	{TraceMessage}
	'trace'
	message=Messages
	;

Comment returns Comment:
	{Comment}
	comment=COMMENTS
	;

BuildStatements_Impl returns BuildStatements:
	{BuildStatements}
	'BuildStatements'
	;

DestroyWall returns DestroyWall:
	{DestroyWall}
	'destroyWall'
	'at'
	'row:'
	row=INT
	'col:'
	column=INT
	;

PickMark returns PickMark:
	{PickMark}
	'pickMark'
	'at'
	'row:'
	row=INT
	'col:'
	column=INT
	;

DropMark returns DropMark:
	{DropMark}
	'dropMark'
	'at'
	'row:'
	row=INT
	'col:'
	column=INT
	;

BuildWall returns BuildWall:
	{BuildWall}
	'buildWall'
	'at'
	'row:'
	row=INT
	'col:'
	column=INT
	;

RunningStatements_Impl returns RunningStatements:
	{RunningStatements}
	'RunningStatements'
	;

LogicalExps_Impl returns LogicalExps:
	{LogicalExps}
	'LogicalExps'
	;

Else returns Else:
	{Else}
	'else'
	'do'
	( runningstatements+=RunningStatements ( runningstatements+=RunningStatements)* )?
	'end'
	;

Full returns Full:
	{Full}
	(not = Not)?
	'full'
	;

Mark returns Mark:
	{Mark}
	(not = Not)?
	'mark'
	;

WallAhead returns WallAhead:
	{WallAhead}
	(not = Not)?
	'wall'
	'ahead'
	;

Heading returns Heading:
	{Heading}
	(not = Not)?
	'heading'
	direction = Directions
	;

SingleLogalExp_Impl returns SingleLogalExp:
	{SingleLogalExp}
	'SingleLogalExp'
	;

BinaryLogicalExp returns BinaryLogicalExp:
	singlelogalexp+=SingleLogalExp
	(binaries+=Binaries
	singlelogalexp+=SingleLogalExp)+;

Not returns Not:
	{Not}
	'not'
	;

enum Directions returns Directions:
				south = 'south' | north = 'north' | west = 'west' | east = 'east';

Binaries_Impl returns Binaries:
	{Binaries}
	'Binaries'
	;

And returns And:
	{And}
	'and'
	;

Or returns Or:
	{Or}
	'or'
	;

EInt returns ecore::EInt:
	'-'? INT;
	
Messages returns ecore::EString:
	STRING
;

terminal COMMENTS returns ecore::EString:
	'#' ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|' '|
	'!'|'*'|'&'|'^'|'%'|'$'|'@'|'('|')'|
	'-'|'='|'+'|'['|']'|'{'|'}'|';'|':'|
	','|'<'|'.'|'/'|'>'|'?')* '\n'
;

terminal NAME returns ecore::EString:
	('a'..'z' | 'A'..'Z')+
;
