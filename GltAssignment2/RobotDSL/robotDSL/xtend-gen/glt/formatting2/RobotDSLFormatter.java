/**
 * generated by Xtext 2.11.0
 */
package glt.formatting2;

import com.google.inject.Inject;
import glt.services.RobotDSLGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import robotDSLEcore.Else;
import robotDSLEcore.IfStatement;
import robotDSLEcore.LogicalExps;
import robotDSLEcore.RunningStatements;
import robotDSLEcore.Script;
import robotDSLEcore.Statements;

@SuppressWarnings("all")
public class RobotDSLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RobotDSLGrammarAccess _robotDSLGrammarAccess;
  
  protected void _format(final Script script, @Extension final IFormattableDocument document) {
    EList<Statements> _statements = script.getStatements();
    for (final Statements statements : _statements) {
      document.<Statements>format(statements);
    }
  }
  
  protected void _format(final IfStatement ifStatement, @Extension final IFormattableDocument document) {
    document.<LogicalExps>format(ifStatement.getLogicalexps());
    EList<RunningStatements> _runningstatements = ifStatement.getRunningstatements();
    for (final RunningStatements runningStatements : _runningstatements) {
      document.<RunningStatements>format(runningStatements);
    }
    document.<Else>format(ifStatement.getElse());
  }
  
  public void format(final Object ifStatement, final IFormattableDocument document) {
    if (ifStatement instanceof XtextResource) {
      _format((XtextResource)ifStatement, document);
      return;
    } else if (ifStatement instanceof IfStatement) {
      _format((IfStatement)ifStatement, document);
      return;
    } else if (ifStatement instanceof Script) {
      _format((Script)ifStatement, document);
      return;
    } else if (ifStatement instanceof EObject) {
      _format((EObject)ifStatement, document);
      return;
    } else if (ifStatement == null) {
      _format((Void)null, document);
      return;
    } else if (ifStatement != null) {
      _format(ifStatement, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(ifStatement, document).toString());
    }
  }
}
