// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/robotDSLEcore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Script returns Script:
	{Script}
	'Script'
	name=EString
	'runs'
	'as'
	(statements+=Statements ( statements+=Statements)* )?
	'end'
	;

Statements returns Statements:
	IfStatement | WhileStatement | RepeatStatement | Step | TurnLeft | Drop | Pick | TraceMessage | Comment;

LogicalExps returns LogicalExps:
	Full | Mark | WallAhead | Heading;

CommandStatement returns CommandStatement:
	Step | TurnLeft | Drop | Pick | TraceMessage | Comment;

EString returns ecore::EString:
	STRING | ID;

Statements_Impl returns Statements:
	{Statements}
	'Statements'
	;

CommandStatement_Impl returns CommandStatement:
	{CommandStatement}
	'CommandStatement'
	;

IfStatement returns IfStatement:
	'if'
	logicalexps = LogicalExps
	'do'
	( statements+=Statements (statements+=Statements)* )?
	'end'
	(
		'else'
		'do'
		( statements+=Statements (statements+=Statements)* )?
		'end'
	)?
	;

WhileStatement returns WhileStatement:
	'while'
	logicalexps=LogicalExps
	'do'
	( statements+=Statements (statements+=Statements)* )?
	'end'
	;

RepeatStatement returns RepeatStatement:
	{RepeatStatement}
	'repeat'
	time = EInt
	'times'
	(commandstatement+=CommandStatement ( commandstatement+=CommandStatement)*  )?
	'end';

Step returns Step:
	{Step}
	'step'
	;

TurnLeft returns TurnLeft:
	{TurnLeft}
	'turnLeft'
	;

Drop returns Drop:
	{Drop}
	'drop'
	;

Pick returns Pick:
	{Pick}
	'pick'
	;

TraceMessage returns TraceMessage:
	{TraceMessage}
	'trace'
	message = Messages
	;

Comment returns Comment:
	{Comment}
	'#'
	comment = Comments;

LogicalExps_Impl returns LogicalExps:
	{LogicalExps}
	'LogicalExps'
	;

Full returns Full:
	{Full}
	'full'
	;

Mark returns Mark:
	{Mark}
	'mark'
	;

WallAhead returns WallAhead:
	{WallAhead}
	'wall'
	'head'
	;

Heading returns Heading:
	{Heading}
	'heading'
	direction = Directions;

enum Directions returns Directions:
				south = 'south' | north = 'north' | west = 'west' | east = 'east';

EInt returns ecore::EInt:
	'-'? INT;
	
Messages returns ecore::EString:
	STRING
;

Comments returns ecore::EString:
	(WS* EString)*
;
