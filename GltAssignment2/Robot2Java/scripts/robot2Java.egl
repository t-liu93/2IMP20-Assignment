[* General Class name *]

public class [%=Script.a_name %] extends RobotFrame {
	public [%=Script.a_name %](){}
	
	@Override
	protected void perform() {
		[% for (statement in Script.c_statements) {%]
			[% if (statement.getAttribute("xsi:type") == "robotDSLEcore:Step") { %]
		step();
			[% } 
			else if (statement.getAttribute("xsi:type") == "robotDSLEcore:TurnLeft") { %]
		turnLeft();
			[%}
			else if (statement.getAttribute("xsi:type") == "robotDSLEcore:Drop") { %]
		drop();
			[%}
			else if (statement.getAttribute("xsi:type") == "robotDSLEcore:Pick") { %]
		pick();
			[%}
			else if (statement.getAttribute("xsi:type") == "robotDSLEcore:TraceMessage") { %]
		traceMessage([%=statement.a_message%]);
			[%} 
			else if (statement.getAttribute("xsi:type") == "robotDSLEcore:IfStatement") { %]
		if ([% for (logalExps in statement.c_logicalexps) { 
					if (logalExps.getAttribute("xsi:type") == "robotDSLEcore:Full") { 
						for (e in logalExps.children) { 
							if (e.tagName == "not") { %]![% }
						}%]isFull()[%
					} else if (logalExps.getAttribute("xsi:type") == "robotDSLEcore:Mark") {
						for (e in logalExps.children) { 
							if (e.tagName == "not") { %]![% }
						}%]isMark()[%
					} else if (logalExps.getAttribute("xsi:type") == "robotDSLEcore:WallAhead") {
						for (e in logalExps.children) { 
							if (e.tagName == "not") { %]![% }
						}%]wallAhead()[%
					} else if (logalExps.getAttribute("xsi:type") == "robotDSLEcore:Heading") {
						for (e in logalExps.children) { 
							if (e.tagName == "not") { %]![% }
						}%]heading(Direction.[%=logalExps.a_direction%])[%
					} else if (logalExps.getAttribute("xsi:type") == "robotDSLEcore:BinaryLogicalExp") {
						if (logalExps.e_singlelogalexp.getAttribute("xsi:type") == "robotDSLEcore:Full") {
							for (e in logalExps.children) {
								if (e.tagName == "not") { %]![% }
							}%]isFull()[%
						} else if (logalExps.e_singlelogalexp.getAttribute("xsi:type") == "robotDSLEcore:Mark") {
							for (e in logalExps.children) {
								if (e.tagName == "not") { %]![% }
							}%]isMark()[%
						} else if (logalExps.e_singlelogalexp.getAttribute("xsi:type") == "robotDSLEcore:WallAhead") {
							for (e in logalExps.children) {
								if (e.tagName == "not") { %]![% }
							}%]wallAhead()[%
						} else if (logalExps.e_singlelogalexp.getAttribute("xsi:type") == "robotDSLEcore:Heading") {
							for (e in logalExps.children) {
								if (e.tagName == "not") { %]![% }
							}%]heading(Direction.[%=logalExps.e_singlelogalexp.a_direction%])[%
						}
						for (binary in logalExps.c_binaries) {
							if (binary.getAttribute("xsi:type") == "robotDSLEcore:And") {
								%] &&[%
								if (binary.e_singlelogalexp.getAttribute("xsi:type") == "robotDSLEcore:Full") { 
									for (e in logalExps.children) { 
										if (e.tagName == "not") { %]![% }
									}%] isFull()[%
								} else if (binary.e_singlelogalexp.getAttribute("xsi:type") == "robotDSLEcore:Mark") { 
									for (e in logalExps.children) { 
										if (e.tagName == "not") { %]![% }
									}%] isMark()[%
								} else if (binary.e_singlelogalexp.getAttribute("xsi:type") == "robotDSLEcore:WallAhead") { 
									for (e in logalExps.children) { 
										if (e.tagName == "not") { %]![% }
									}%] wallAhead()[%
								} else if (binary.e_singlelogalexp.getAttribute("xsi:type") == "robotDSLEcore:Heading") { 
									for (e in logalExps.children) { 
										if (e.tagName == "not") { %]![% }
									}%] heading(Direction.[%=binary.e_singlelogalexp.a_direction%])[%
								} 
							} 
						}
					}
				}%]) {
				[% for (runningStats in statement.c_runningstatements) {
				 	if (runningStats.getAttribute("xsi:type") == "robotDSLEcore:Step") { %]
			step();
					[% } 
					else if (runningStats.getAttribute("xsi:type") == "robotDSLEcore:TurnLeft") { %]
			turnLeft();
					[%}
					else if (runningStats.getAttribute("xsi:type") == "robotDSLEcore:Drop") { %]
			drop();
					[%}
					else if (runningStats.getAttribute("xsi:type") == "robotDSLEcore:Pick") { %]
			pick();
					[%}
					} %]
		} [%} %]
			
		[%} %]
	}
	
	
	//Some additional logical methods
	private boolean wallAhead() {
		return ! super.canMove();
	}
	
	//Statement methods
	//Step
	private void step() {
		if (canMove()) {
			moveRobot();
			pause();
		} else {
			reportError("Oops, There's a wall in front of me. I can't make a step forward.");
		}
	}
	//turnLeft
	private void turnLeftSub() {
		super.turnLeft();
		pause();
	}
	//Drop
	private void drop() {
		if (super.isFull()) {
			reportError("Oops, the current cell is full, I cannot drop more marks.");
		} else {
			super.addMark();
		}
		pause();
	}
	//Pick
	private void pick() {
		if (super.getCurrentCell().getMarks() == 0) {
			reportError("There is no mark in this cell, I cannot pick up.");
		} else {
			super.removeMark();
		}
		pause();
	}
	//Trace message
	private void traceMessage(String msg) {
		super.trace(msg);
		pause();
	}
	
	
	//Main class
	public static void main(String[] args) {
		[%=Script.a_name %] script = new [%=Script.a_name %]();
		script.initializeComponents();
		script.run();
	}
}